#pragma enable_d3d11_debug_symbols
#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel MAIN_1 main=MAIN_1 SINGLE_SCATTERING
#pragma kernel MAIN_N main=MAIN_N MULTIPLE_SCATTERING

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/PbrSky/PbrSkyCommon.hlsl"

#define TABLE_SIZE uint(PBRSKYCONFIG_GROUND_IRRADIANCE_TABLE_SIZE)

RW_TEXTURE2D(float4, _GroundIrradianceTable); // of TABLE_SIZE

[numthreads(64, 1, 1)]
void main(uint dispatchThreadId : SV_DispatchThreadID)
{
    // We don't care about the extremal points.
    const float scale = rcp(TABLE_SIZE);
    const float bias  = 0.5 * scale;

    // Let the hardware and the driver handle the ordering of the computation.
    uint2 tableCoord = uint2(dispatchThreadId, 0);

    float uv = tableCoord.x * scale + bias;

    // As we look at the planet in the direction of the sun, the ground is rotationally invariant.
    float NdotL = UnmapCosineOfZenithAngle(uv.x);

    float4 tableEntry = float4(0, 0, 0, 1);

    if (NdotL > 0)
    {
        float3 oDepth = SampleOpticalDepthTexture(NdotL, 0, false);
        float3 transm = TransmittanceFromOpticalDepth(oDepth);

        tableEntry.rgb = transm * NdotL;
    }

    _GroundIrradianceTable[tableCoord] = tableEntry;
}
